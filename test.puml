@startuml
class it.polimi.ingsw.psp12.network.components.ClientMessageJsonDeserializer {
+ ClientMessage deserialize(JsonElement,Type,JsonDeserializationContext)
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageOK {
+ <<Create>> ServerMessageOK()
}
class it.polimi.ingsw.psp12.network.messages.ClientMessagePlaceResource {
- Resource resource
+ <<Create>> ClientMessagePlaceResource(Resource)
+ Resource getResource()
}
class it.polimi.ingsw.psp12.view.gui.menus.BuyDevCardMenu {
- Level level
- CardColor color
- int column
- JButton[] buttons
+ <<Create>> BuyDevCardMenu(DevCard[][])
+ ClientMessageBuyDevCard prompt()
+ void actionPerformed(ActionEvent)
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageGameOver {
+ <<Create>> ServerMessageGameOver()
}
class it.polimi.ingsw.psp12.model.Strongbox {
- Collection<Resource> resources
+ <<Create>> Strongbox()
+ Collection<Resource> getResources()
+ void extract(Resource)
+ void deposit(Collection<Resource>)
+ boolean contains(Collection<Resource>)
+ String StrongboxView()
}
class it.polimi.ingsw.psp12.model.DefaultProduction {
+ <<Create>> DefaultProduction()
+ void setInput(Resource,Resource)
+ void setInput(Resource,int)
+ void setOutput(Resource)
+ String view()
}
class it.polimi.ingsw.psp12.view.gui.menus.LeaderOptionsMenu {
- JButton[] buttons
- ClientMessage message
+ <<Create>> LeaderOptionsMenu(LeaderCard[])
+ void actionPerformed(ActionEvent)
+ ClientMessage prompt()
+ {static} boolean isProduction(LeaderCard)
}
class it.polimi.ingsw.psp12.network.messages.EndTurnException {
}
class it.polimi.ingsw.psp12.controller.Game {
- Player[] players
+ DevCardBoard devCardBoard
+ LeaderCardDeck leaderCardDeck
+ Market market
- Pope pope
- PcPlayerBoard pc
+ <<Create>> Game(Player)
+ <<Create>> Game(Player[])
- void startSoloGame()
- void nextPope()
- void startGame()
- void showAllGame(Player)
- String showLeaderCards(Player)
- void showPlayersBoards(Player)
+ void setPlayers(Player[])
- boolean checkEndGame()
- void setupGame()
- void createDevCardBoard()
- void createLeaderDeck()
- void createMarket()
- void finalSummary()
+ void discardsToFaith(PlayerBoard,int)
- void checkPope()
}
class it.polimi.ingsw.psp12.model.singlePlayer.ActionPileTest {
+ void getFirst()
}
class it.polimi.ingsw.psp12.controller.Player {
+ NetInterface net
+ PlayerBoard playerBoard
+ String playerId
- Controller controller
- LeaderCard[] tempLeaders
+ <<Create>> Player()
+ <<Create>> Player(ServerSocket)
- void addResource(int)
+ boolean turn(boolean)
+ void receiveLeaders()
+ void secondPlayer()
+ void thirdPlayer()
+ void fourthPlayer()
+ void drawLeaderCards(LeaderCard[])
- void setLeaders(int[])
+ void setController(Controller)
+ void run()
}
class it.polimi.ingsw.psp12.view.gui.menus.ProduceMenu {
- boolean[] activated
- JButton[] buttons
+ <<Create>> ProduceMenu(PlayerBoard)
+ void actionPerformed(ActionEvent)
+ ClientMessage prompt()
}
class it.polimi.ingsw.psp12.network.components.Listener {
- Socket listenerSocket
- DataInputStream inputStream
- String listenerName
+ <<Create>> Listener(ServerSocket)
+ String receive()
+ String getTargetAddress()
+ void close()
}
class it.polimi.ingsw.psp12.controller.ClientController {
- NetInterface net
- Manager manager
+ <<Create>> ClientController(Manager)
+ void setup(NetInterface)
+ void main()
}
class it.polimi.ingsw.psp12.model.Production {
# Resource[] input
# Resource[] output
- int faithOutput
+ <<Create>> Production(Resource[],Resource[])
+ <<Create>> Production(Resource[],Resource[],int)
+ Resource[] getInput()
+ Resource[] getOutput()
+ int getFaith()
+ Resource[] produce(Resource[])
+ String view()
}
class it.polimi.ingsw.psp12.model.DevCardDeck {
- Stack<DevCard> deck
+ <<Create>> DevCardDeck(DevCard[])
+ Stack<DevCard> getDeck()
+ DevCard draw()
+ DevCard peek()
}
class it.polimi.ingsw.psp12.network.DisconnectedException {
+ <<Create>> DisconnectedException(String)
}
class it.polimi.ingsw.psp12.network.components.ServerMessageJsonDeserializer {
+ ServerMessage deserialize(JsonElement,Type,JsonDeserializationContext)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageJoinGame {
- String playerId
- int gameMode
+ <<Create>> ClientMessageJoinGame(String,int)
+ String getPlayerId()
+ int getGameMode()
}
class it.polimi.ingsw.psp12.model.singlePlayer.ActionPile {
- Stack<ActionToken> pile
+ <<Create>> ActionPile()
+ void setupActionPile()
+ ActionToken getFirst()
}
class it.polimi.ingsw.psp12.network.NetInterface {
- {static} LinkedList<Message> ClientQueue
- {static} LinkedList<Message> ServerQueue
- {static} boolean isFirst
- boolean isClient
+ <<Create>> NetInterface()
+ void send(Message)
+ Message receive()
~ {static} void send(Message,Sender,Listener)
}
class it.polimi.ingsw.psp12.model.DevCardBoard {
- DevCardDeck[][] board
+ <<Create>> DevCardBoard(DevCardDeck[][])
+ DevCard[][] getTop()
+ String topView()
+ DevCard getCard(CardColor,Level)
+ DevCard buy(Level,CardColor,Collection<Resource>)
- void shuffleDecks(DevCardDeck[][])
}
class it.polimi.ingsw.psp12.view.gui.panels.PlayerBoardPanel {
+ <<Create>> PlayerBoardPanel(PlayerBoard,boolean,String)
}
class it.polimi.ingsw.psp12.model.singlePlayer.PcPlayerBoard {
+ ActionPile actionPile
- int darkFaith
- DevCardBoard board
+ <<Create>> PcPlayerBoard(DevCardBoard)
+ String turn()
+ String darkFaithView()
+ int getDarkFaith()
+ void addFaith(int)
}
class it.polimi.ingsw.psp12.model.TestPlayerBoard {
~ PlayerBoard pb
~ Resource[] cost
~ Production production
~ DevCard newCard
~ DevCard newCard2
+ void testAddDevCard()
+ void testPlayerView()
}
class it.polimi.ingsw.psp12.model.LeaderProduction {
- Production production
- Resource choice
- CardColor requirements
+ <<Create>> LeaderProduction(int,Resource,CardColor,Production,String)
+ Production getProduction()
+ CardColor getRequirements()
+ void setChoice(Resource)
+ Resource getChoice()
+ String view()
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageChosenWhite {
- boolean position
+ <<Create>> ClientMessageChosenWhite(boolean)
+ boolean getPosition()
}
class it.polimi.ingsw.psp12.Client {
+ {static} boolean isOn
+ {static} void run(String)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageEndTurn {
+ <<Create>> ClientMessageEndTurn()
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageTakeResources {
- boolean isRow
+ int position
+ <<Create>> ClientMessageTakeResources(boolean,int)
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.model.DevCard {
- Resource[] cost
- Level level
- CardColor color
- int VP
- Production production
- String imagePath
+ <<Create>> DevCard(Level,CardColor,int,Resource[],Production,String)
+ Resource[] getCost()
+ Level getLevel()
+ CardColor getColor()
+ int getVP()
+ Production getProduction()
+ String devCardView()
+ String coveredView()
+ String getPath()
}
class it.polimi.ingsw.psp12.view.gui.ChoiceBox {
+ {static} int prompt(String,String,String[])
+ {static} int prompt(String,String,ImageIcon[])
}
class it.polimi.ingsw.psp12.network.components.Serializer {
+ {static} String serialize(Object)
+ {static} ClientMessage deserializeMessage(String)
+ {static} ServerMessage deserializeServerMessage(String)
+ {static} PlayerBoard deserializePB(String)
+ {static} Market deserializeMarket(String)
+ {static} DevCardBoard deserializeDB(String)
}
class it.polimi.ingsw.psp12.model.Market {
- Marble sideMarble
- Marble[][] marketBoard
+ <<Create>> Market()
+ <<Create>> Market(Marble[])
+ Marble getSideMarble()
+ void setSideMarble(Marble)
+ Marble[][] getMarketBoard()
+ void setMarketBoard(Marble[][])
+ Marble[] takeResources(boolean,int)
+ String view()
}
class it.polimi.ingsw.psp12.network.components.ListenerOccupiedException {
+ <<Create>> ListenerOccupiedException(String)
}
class it.polimi.ingsw.psp12.controller.EndGameException {
- String message
+ <<Create>> EndGameException(String)
+ String getMessage()
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageSetResource {
- Resource resource
- int position
+ <<Create>> ClientMessageSetResource(Resource,int)
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.view.gui.menus.TakeResourcesMenu {
- boolean isRow
- int position
- JButton[] buttons
+ <<Create>> TakeResourcesMenu(Market)
+ ClientMessageTakeResources prompt()
+ void actionPerformed(ActionEvent)
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageError {
- String error
+ <<Create>> ServerMessageError(String)
+ String getError()
}
class it.polimi.ingsw.psp12.ClientCLI {
+ {static} void main(String[])
}
class it.polimi.ingsw.psp12.model.LeaderCardViewTest {
~ Resource[] cost
~ Production production
~ LeaderCard lead1
~ LeaderCard lead2
~ LeaderCard lead3
~ LeaderCard lead4
+ void leaderCardView()
}
class it.polimi.ingsw.psp12.model.TestDepot {
~ Depot depot
~ Resource resource
+ void testDeposit()
+ void testExtract()
+ void testDepotView()
}
class it.polimi.ingsw.psp12.view.gui.menus.ConnectMenu {
- int[] info
~ JTextField address
- JTextField port
- JTextField localport
+ <<Create>> ConnectMenu()
+ int[] prompt()
+ void actionPerformed(ActionEvent)
}
class it.polimi.ingsw.psp12.network.components.Sender {
- String logName
- Socket socket
- DataOutputStream outStream
+ <<Create>> Sender(String,int)
+ void send(String)
+ void close()
}
class it.polimi.ingsw.psp12.model.TestStrongbox {
+ void testContains()
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageTurn {
- boolean mainAction
+ <<Create>> ServerMessageTurn(boolean)
+ boolean getAction()
}
abstract class it.polimi.ingsw.psp12.network.messages.ClientMessage {
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.model.DevCardBoardTest {
~ Resource[] r1
~ Resource[] r2
~ Resource[] r3
~ Resource[] r4
~ Production p1
~ Production p2
~ Production p3
~ DevCard d1
~ DevCard d2
~ DevCard d3
~ DevCardDeck[][] board
~ DevCardBoard dcb
+ void DevCardBordViewTest()
}
class it.polimi.ingsw.psp12.model.TestMarket {
~ Market market
~ Marble[][] testMarketBoard
~ Marble testSideMarble
+ void trySetSideMarbleWithCorrectValue()
+ void trySetMarketBoardWithCorrectValues()
+ void tryTakeResources()
}
class it.polimi.ingsw.psp12.view.gui.menus.DefaultProductionMenu {
- Resource resource
- int position
- JButton[] buttons
+ <<Create>> DefaultProductionMenu(DefaultProduction)
+ void actionPerformed(ActionEvent)
+ ClientMessage prompt()
}
class it.polimi.ingsw.psp12.view.ServerView {
+ {static} void loadParameters()
+ {static} String serverMenu()
+ {static} void toggleServer()
+ {static} void editParameters()
- {static} void clearConsole()
}
class it.polimi.ingsw.psp12.model.Reader {
+ {static} Scanner in
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageLeaderActivation {
+ int position
+ <<Create>> ClientMessageLeaderActivation(int)
+ boolean resolve(Controller)
}
abstract class it.polimi.ingsw.psp12.view.gui.menus.SubMenu {
~ JFrame frame
~ JPanel panel
~ void finalizeAndWait()
~ void setHeader(String)
}
class it.polimi.ingsw.psp12.view.gui.menus.MainMenu {
~ int choice
~ JTextField id
~ JLabel username
~ JPanel panel
~ JFrame frame
~ String[] options
+ <<Create>> MainMenu()
+ int prompt()
+ void actionPerformed(ActionEvent)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageProduce {
- boolean[] activated
+ <<Create>> ClientMessageProduce(boolean[])
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.view.gui.panels.DevBoardPanel {
+ <<Create>> DevBoardPanel(DevCardBoard)
+ {static} DevCard[][] transpose(DevCard[][])
}
class it.polimi.ingsw.psp12.view.gui.menus.GameMenu {
- JFrame frame
- JPanel internalPanel
- JLabel wait
- PlayerBoardPanel pbpanel
- JPanel[] others
- GridBagConstraints PlayerBoardConstraints
- GridBagConstraints MarketConstraints
- GridBagConstraints DevBoardConstraints
- GridBagConstraints ButtonsConstraints
- int playerNumber
- JPanel mpanel
- JPanel dbpanel
- JPanel buttonpanel
- String choice
- Market market
- DevCardBoard devCardBoard
- PlayerBoard playerBoard
- boolean first
- JButton[] options
+ <<Create>> GameMenu()
+ void setVisible()
+ void close()
+ void setWaiting()
- void displayFirst()
+ void display(ServerMessageView)
+ void actionPerformed(ActionEvent)
+ ClientMessage turn(boolean)
- void showButtons(boolean)
- void hideButtons()
- void displayPB(PlayerBoard)
- void displayOPB(PlayerBoard,String)
- void displayMarket(Market)
- void displayDev(DevCardBoard)
- void displaySolo(String)
}
class it.polimi.ingsw.psp12.view.gui.menus.GameMenu.ButtonPanel {
~ <<Create>> ButtonPanel(boolean)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageBuyDevCard {
- Level level
- CardColor color
- int column
+ <<Create>> ClientMessageBuyDevCard(Level,CardColor,int)
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.ClientGUI {
+ {static} void main(String[])
}
class it.polimi.ingsw.psp12.view.gui.panels.MarketPanel {
+ <<Create>> MarketPanel(Market)
+ {static} ImageIcon toIcon(Marble)
}
class it.polimi.ingsw.psp12.network.ServerNetworkController {
- {static} int port
- {static} int maxSlots
+ {static} boolean isON
- {static} int activeSlots
- {static} ServerSocket serverSocket
- {static} Thread connection
+ {static} void setPort(int)
+ {static} void setMaxSlots(int)
+ {static} int getPort()
+ {static} int getMaxSlots()
+ {static} boolean getStatus()
+ {static} void startServer()
+ {static} void stopServer()
+ {static} void addPlayer()
+ {static} void removePlayer()
}
class it.polimi.ingsw.psp12.model.LeaderSale {
- CardColor[] requirements
+ <<Create>> LeaderSale(int,Resource,CardColor[],String)
+ CardColor[] getRequirements()
+ Resource[] downPrice(Resource[])
+ String view()
}
class it.polimi.ingsw.psp12.network.ServerNetInterface {
- Sender sender
- Listener listener
+ <<Create>> ServerNetInterface(ServerSocket)
+ void send(Message)
+ ClientMessage receive()
}
class it.polimi.ingsw.psp12.view.gui.menus.LeadersChoiceMenu {
- int[] choice
- ImageIcon[] leaders
- JLabel selected
- JButton[] buttons
+ <<Create>> LeadersChoiceMenu(String[])
+ int[] prompt()
+ void actionPerformed(ActionEvent)
}
abstract class it.polimi.ingsw.psp12.network.messages.ServerMessage {
}
class it.polimi.ingsw.psp12.model.ResourceCounter {
+ {static} String count(Resource[])
+ {static} String count(Collection<Resource>)
+ {static} int countTypes(Resource[])
+ {static} int countTypes(Collection<Resource>)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageSellLeader {
- int position
+ <<Create>> ClientMessageSellLeader(int)
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.view.gui.panels.DevCardsPanel {
+ <<Create>> DevCardsPanel(PlayerBoard)
}
class it.polimi.ingsw.psp12.view.gui.panels.StrongBoxPanel {
+ <<Create>> StrongBoxPanel(Collection<Resource>)
}
class it.polimi.ingsw.psp12.network.ClientNetInterface {
- Sender sender
- Listener listener
- ServerSocket father
+ <<Create>> ClientNetInterface(String,int,int)
+ void send(Message)
+ ServerMessage receive()
}
abstract class it.polimi.ingsw.psp12.network.Message {
# MessageType type
+ MessageType getType()
}
class it.polimi.ingsw.psp12.view.TestViewHelper {
+ void TestS2SDevCard()
+ void TestS2SLeader()
+ void TestDevBoard()
}
class it.polimi.ingsw.psp12.view.gui.menus.ArrangeMenu {
- Resource choice
- JButton[] buttons
+ <<Create>> ArrangeMenu(Collection<Resource>,int)
+ Resource prompt()
+ void actionPerformed(ActionEvent)
}
class it.polimi.ingsw.psp12.model.LeaderTransform {
- CardColor[] requirements
+ <<Create>> LeaderTransform(int,Resource,CardColor[],String)
+ CardColor[] getRequirements()
+ String view()
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageChooseLeaders {
- String[] leaders
- String[] icons
+ <<Create>> ServerMessageChooseLeaders(String[],String[])
+ String[] getLeaders(boolean)
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageLocalPort {
- int localPort
+ <<Create>> ClientMessageLocalPort(int)
+ int getPort()
}
class it.polimi.ingsw.psp12.controller.Queue {
- {static} Player[] player2
- {static} Player[] player3
- {static} Player[] player4
- {static} int count2
- {static} int count3
- {static} int count4
+ {static} void enterQueue(int,Player)
}
class it.polimi.ingsw.psp12.view.gui.menus.GUIActionManager {
- GameMenu gm
+ ClientMessage turn(boolean)
+ void view(ServerMessageView)
+ void displayError(String)
+ ClientMessage arrangeDepot(Collection<Resource>)
+ ClientMessage chooseLeaders(ServerMessageChooseLeaders)
+ ClientMessage addResource()
+ ClientMessage chooseResource(Resource[])
+ int joinMatch()
+ String[] showOnlineMenu()
+ boolean online()
+ void waitForTurn()
+ String showOfflineMenu()
+ void startOfflineGame(Manager)
+ void showCredits()
+ ClientNetInterface connect()
+ void close()
}
class it.polimi.ingsw.psp12.network.SerializerTest {
+ void testSerialize()
}
class it.polimi.ingsw.psp12.model.LeaderCardDeck {
- Stack<LeaderCard> deck
+ <<Create>> LeaderCardDeck(LeaderCard[])
+ LeaderCard[] draw4()
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageTryDepotConfiguration {
- Resource[] input
- int discardAmount
+ <<Create>> ClientMessageTryDepotConfiguration(Resource[],int)
+ boolean resolve(Controller)
}
class it.polimi.ingsw.psp12.model.PlayerBoard {
- int faithTrack
- int popeVP
- Strongbox strongbox
- LeaderCard[] leaderCards
- Depot depot
- DevCard[][] devCards
- DefaultProduction defaultProduction
+ <<Create>> PlayerBoard()
+ <<Create>> PlayerBoard(LeaderCard[])
+ void addFaith(int)
+ int getFaith()
+ DefaultProduction getDefaultProduction()
+ LeaderCard getLeaderCard(int)
+ LeaderCard[] getLeaderCard()
+ void sellLeader(int)
+ Strongbox getStrongbox()
+ Depot getDepot()
+ DevCard getDevCard(int,int)
+ DevCard getDevCard(int)
+ void addDevCard(DevCard,int)
+ boolean checkAddable(DevCard,int)
+ String playerBoardView(String)
- String devCardsView()
- String ShowFaithTrack()
+ void setLeaders(LeaderCard[])
+ void addPope(int)
+ int getDevCardsNumber()
+ int getTotalVP()
}
class it.polimi.ingsw.psp12.model.TestDownPrice {
+ void TestPriceReduction()
}
class it.polimi.ingsw.psp12.view.ViewHelper {
+ {static} String displayS2S(String,String)
+ {static} String displayS2S(String[])
+ {static} String displayS2S(String,String,String)
}
class it.polimi.ingsw.psp12.view.gui.TestFrameAndPanels {
+ {static} void main(String[])
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageMarketReturn {
- Collection<Resource> resources
+ <<Create>> ServerMessageMarketReturn(Collection<Resource>)
+ Collection<Resource> getResources()
}
class it.polimi.ingsw.psp12.view.gui.panels.SoloPanel {
+ <<Create>> SoloPanel(String)
}
class it.polimi.ingsw.psp12.view.CLIActionManager {
- {static} int readInt()
- {static} int readInt(int,int)
+ void view(ServerMessageView)
+ ClientNetInterface connect()
+ void close()
+ void displayError(String)
+ ClientMessage arrangeDepot(Collection<Resource>)
+ boolean online()
+ void waitForTurn()
+ String showOfflineMenu()
+ void showCredits()
+ ClientMessage turn(boolean)
+ ClientMessage chooseLeaders(ServerMessageChooseLeaders)
+ String[] showOnlineMenu()
+ ClientMessage addResource()
+ ClientMessage chooseResource(Resource[])
+ int joinMatch()
}
class it.polimi.ingsw.psp12.view.gui.panels.DefaultProdPanel {
+ <<Create>> DefaultProdPanel(DefaultProduction)
+ <<Create>> DefaultProdPanel(DefaultProduction,int,int)
+ {static} JLabel bracket(int,int)
}
abstract class it.polimi.ingsw.psp12.view.Manager {
+ {abstract}ClientMessage turn(boolean)
+ {abstract}void view(ServerMessageView)
+ {abstract}void displayError(String)
+ {abstract}ClientMessage arrangeDepot(Collection<Resource>)
+ {abstract}ClientMessage chooseLeaders(ServerMessageChooseLeaders)
+ {abstract}ClientMessage addResource()
+ {abstract}ClientMessage chooseResource(Resource[])
+ {abstract}int joinMatch()
+ {abstract}String[] showOnlineMenu()
+ {abstract}boolean online()
+ {abstract}void waitForTurn()
+ {static} void assignDepot(Collection<Resource>,Resource[],Resource[])
+ {abstract}String showOfflineMenu()
+ void startOfflineGame(Manager)
+ {abstract}void showCredits()
+ {abstract}ClientNetInterface connect()
+ {abstract}void close()
}
class it.polimi.ingsw.psp12.model.LeaderDepot {
- Resource requirements
+ <<Create>> LeaderDepot(int,Resource,Resource,String)
+ void toggleActive(Depot)
+ Resource getRequirements()
+ String view()
}
class it.polimi.ingsw.psp12.model.TestProduction {
+ void tryProduceWithCorrectInput()
}
class it.polimi.ingsw.psp12.view.gui.menus.OfflineMenu {
+ <<Create>> OfflineMenu()
}
class it.polimi.ingsw.psp12.model.Depot {
- Resource[] contents
- Resource[] leaderType
+ <<Create>> Depot()
+ Resource getResource(int)
+ Resource getLeaderType(int)
+ void activateLeader(Resource)
+ void deposit(Resource,int)
+ void setContents(Resource[])
+ Resource extract(int)
+ String depotView()
}
class it.polimi.ingsw.psp12.view.gui.panels.DepotPanel {
+ <<Create>> DepotPanel(Resource[])
}
class it.polimi.ingsw.psp12.controller.Controller {
- PlayerBoard pb
- DevCardBoard board
- Market market
- NetInterface net
- Game game
+ <<Create>> Controller(NetInterface,PlayerBoard,DevCardBoard,Market,Game)
+ <<Create>> Controller(PlayerBoard,DevCardBoard,Market)
+ void sellLeader(int)
+ void activateLeader(int)
- boolean checkRequirements(LeaderCard)
+ boolean tryDepotConfiguration(Resource[],int)
- boolean valid(Resource[])
- boolean different(Resource,Resource,Resource)
+ boolean buyDevCard(Level,CardColor,int)
+ boolean produce(boolean[])
+ void setResource(int,Resource)
- ArrayList<Resource> extractCost(Resource[])
+ boolean takeResources(boolean,int)
- Collection<Resource> convert(Marble[])
}
class it.polimi.ingsw.psp12.view.Log {
+ {static} Logger logger
+ {static} void saveLog()
+ void run()
}
class it.polimi.ingsw.psp12.Server {
+ {static} void main(String[])
}
class it.polimi.ingsw.psp12.view.gui.panels.LeadersPanel {
+ <<Create>> LeadersPanel(LeaderCard,LeaderCard,boolean)
}
class it.polimi.ingsw.psp12.model.LeaderCard {
# int vp
# boolean isActive
# Resource type
# String imagePath
+ int getVP()
+ Resource getType()
+ boolean getIsActive()
+ void toggleActive()
+ String view()
+ String getPath()
}
class it.polimi.ingsw.psp12.controller.TestController {
~ LeaderCard[] leaders
~ PlayerBoard pb
~ DevCardDeck[][] board
~ DevCardBoard dcb
~ Market market
~ Controller controller
+ void TestSellLeader()
+ void TestActivateLeader()
+ void TestBuyDevCard()
+ void TestProduce()
}
class it.polimi.ingsw.psp12.network.messages.ClientMessageChosenLeaders {
- int[] positions
+ <<Create>> ClientMessageChosenLeaders(int,int)
+ int[] getPositions()
}
class it.polimi.ingsw.psp12.model.DevCardTest {
~ Resource[] r1
~ Resource[] r2
~ Resource[] r3
~ Production p1
~ DevCard d1
+ void getProduction()
+ void devCardView()
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageTwoMarbleLeaders {
~ Resource one
~ Resource two
+ <<Create>> ServerMessageTwoMarbleLeaders(Resource,Resource)
+ Resource[] getResources()
}
abstract class it.polimi.ingsw.psp12.model.singlePlayer.ActionToken {
# ActionType actionType
+ ActionType getType()
+ {abstract}String view()
}
class it.polimi.ingsw.psp12.model.singlePlayer.ActionFaith {
+ <<Create>> ActionFaith()
+ String view()
}
class it.polimi.ingsw.psp12.model.singlePlayer.ActionShuffle {
+ <<Create>> ActionShuffle()
+ String view()
}
class it.polimi.ingsw.psp12.model.singlePlayer.ActionRemove {
- CardColor cardColor
+ <<Create>> ActionRemove(CardColor)
+ CardColor getCardColor()
+ String view()
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageView {
- String view
- String object
- GUIElement elem
+ <<Create>> ServerMessageView(String)
+ <<Create>> ServerMessageView(String,String,GUIElement)
+ String getView(boolean)
+ GUIElement getElem()
}
class it.polimi.ingsw.psp12.network.messages.ServerMessageAddResource {
+ <<Create>> ServerMessageAddResource()
}


com.google.gson.JsonDeserializer <|.. it.polimi.ingsw.psp12.network.components.ClientMessageJsonDeserializer
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageOK
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessagePlaceResource
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.BuyDevCardMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.BuyDevCardMenu
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageGameOver
it.polimi.ingsw.psp12.model.Production <|-- it.polimi.ingsw.psp12.model.DefaultProduction
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.LeaderOptionsMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.LeaderOptionsMenu
it.polimi.ingsw.psp12.network.messages.Throwable <|-- it.polimi.ingsw.psp12.network.messages.EndTurnException
it.polimi.ingsw.psp12.controller.Thread <|-- it.polimi.ingsw.psp12.controller.Player
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.ProduceMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.ProduceMenu
it.polimi.ingsw.psp12.network.Exception <|-- it.polimi.ingsw.psp12.network.DisconnectedException
com.google.gson.JsonDeserializer <|.. it.polimi.ingsw.psp12.network.components.ServerMessageJsonDeserializer
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageJoinGame
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.PlayerBoardPanel
it.polimi.ingsw.psp12.model.LeaderCard <|-- it.polimi.ingsw.psp12.model.LeaderProduction
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageChosenWhite
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageEndTurn
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageTakeResources
it.polimi.ingsw.psp12.network.components.Exception <|-- it.polimi.ingsw.psp12.network.components.ListenerOccupiedException
it.polimi.ingsw.psp12.controller.Exception <|-- it.polimi.ingsw.psp12.controller.EndGameException
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageSetResource
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.TakeResourcesMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.TakeResourcesMenu
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageError
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.ConnectMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.ConnectMenu
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageTurn
it.polimi.ingsw.psp12.network.Message <|-- it.polimi.ingsw.psp12.network.messages.ClientMessage
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.DefaultProductionMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.DefaultProductionMenu
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageLeaderActivation
it.polimi.ingsw.psp12.view.gui.menus.JFrame <|-- it.polimi.ingsw.psp12.view.gui.menus.SubMenu
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.MainMenu
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageProduce
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.DevBoardPanel
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.GameMenu
it.polimi.ingsw.psp12.view.gui.menus.GameMenu +.. it.polimi.ingsw.psp12.view.gui.menus.GameMenu.ButtonPanel
it.polimi.ingsw.psp12.view.gui.menus.JPanel <|-- it.polimi.ingsw.psp12.view.gui.menus.GameMenu.ButtonPanel
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageBuyDevCard
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.MarketPanel
it.polimi.ingsw.psp12.model.LeaderCard <|-- it.polimi.ingsw.psp12.model.LeaderSale
it.polimi.ingsw.psp12.network.NetInterface <|-- it.polimi.ingsw.psp12.network.ServerNetInterface
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.LeadersChoiceMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.LeadersChoiceMenu
it.polimi.ingsw.psp12.network.Message <|-- it.polimi.ingsw.psp12.network.messages.ServerMessage
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageSellLeader
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.DevCardsPanel
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.StrongBoxPanel
it.polimi.ingsw.psp12.network.NetInterface <|-- it.polimi.ingsw.psp12.network.ClientNetInterface
java.awt.event.ActionListener <|.. it.polimi.ingsw.psp12.view.gui.menus.ArrangeMenu
it.polimi.ingsw.psp12.view.gui.menus.SubMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.ArrangeMenu
it.polimi.ingsw.psp12.model.LeaderCard <|-- it.polimi.ingsw.psp12.model.LeaderTransform
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageChooseLeaders
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageLocalPort
it.polimi.ingsw.psp12.view.Manager <|-- it.polimi.ingsw.psp12.view.gui.menus.GUIActionManager
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageTryDepotConfiguration
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageMarketReturn
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.SoloPanel
it.polimi.ingsw.psp12.view.Manager <|-- it.polimi.ingsw.psp12.view.CLIActionManager
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.DefaultProdPanel
it.polimi.ingsw.psp12.model.LeaderCard <|-- it.polimi.ingsw.psp12.model.LeaderDepot
it.polimi.ingsw.psp12.view.gui.menus.MainMenu <|-- it.polimi.ingsw.psp12.view.gui.menus.OfflineMenu
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.DepotPanel
it.polimi.ingsw.psp12.view.Thread <|-- it.polimi.ingsw.psp12.view.Log
it.polimi.ingsw.psp12.view.gui.panels.JPanel <|-- it.polimi.ingsw.psp12.view.gui.panels.LeadersPanel
it.polimi.ingsw.psp12.network.messages.ClientMessage <|-- it.polimi.ingsw.psp12.network.messages.ClientMessageChosenLeaders
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageTwoMarbleLeaders
it.polimi.ingsw.psp12.model.singlePlayer.ActionToken <|-- it.polimi.ingsw.psp12.model.singlePlayer.ActionFaith
it.polimi.ingsw.psp12.model.singlePlayer.ActionToken <|-- it.polimi.ingsw.psp12.model.singlePlayer.ActionShuffle
it.polimi.ingsw.psp12.model.singlePlayer.ActionToken <|-- it.polimi.ingsw.psp12.model.singlePlayer.ActionRemove
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageView
it.polimi.ingsw.psp12.network.messages.ServerMessage <|-- it.polimi.ingsw.psp12.network.messages.ServerMessageAddResource
@enduml