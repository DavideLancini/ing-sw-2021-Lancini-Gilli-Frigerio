@startuml
package controller{
class ClientController{
}
class Controller{
    - NetInterface net
    - Manager manager
    + void setup (NetInterface net)
    + ClientController(Manager manager)
    + void main() throws DisconnectedException
    }
class Game{}
class Player extends Thread{}
class Queue{}
ClientController <-- NetInterface
ClientController <-- Manager
Controller <-- PlayerBoard
Controller <-- DevCardBoard
Controller <-- Market
Controller <-- NetInterface
Controller <-- Game
Game "1...4" *-- Player
Game *-- DevCardBoard
Game *-- LeaderCardDeck
Game *-- Market
Game <-- Pope
Game *-- PcPlayerBoard
Player <--NetInterface
Player *-- PlayerBoard
Player *-- Controller
Player <-- LeaderCard
Queue <-- Player
}

package model{
    package singlePlayer{
    class ActionPile{}
    class ActionToken{}
    enum ActionType{}
    class PcPlayerBoard{}
    ActionPile "7" *-- ActionToken
    ActionToken <-- ActionType
    PcPlayerBoard *--DevCardBoard
    PcPlayerBoard *-- ActionPile
}

enum CardColor
class DefaultProduction extends Production
class Depot
class DevCard
class DevCardBoard
class DevCardDeck
class LeaderCard
class LeaderCardDeck
class LeaderDepot
class LeaderProduction
class LeaderSale
class LeaderTransform
enum Level
enum Marble
class Market
class PlayerBoard
enum Pope
class Production
class Reader
enum Resource
class ResourceCounter
class Strongbox
DevCard <--*  Resource
DevCard <--* Level
DevCard <--CardColor
DevCard <-- Production
DevCardBoard "12" *-- DevCardDeck
DevCardDeck "48" *-- DevCard
LeaderCard <--* Resource
LeaderCardDeck "4" *-- LeaderDepot
LeaderCardDeck "4" *-- LeaderSale
LeaderCardDeck "4" *-- LeaderProduction
LeaderCardDeck "4" *-- LeaderTransform
Depot <-- Resource
Market "13" *-- Marble
PlayerBoard *-- Strongbox
PlayerBoard "2"*-- LeaderCard
PlayerBoard *-- Depot
PlayerBoard <-- DevCardDeck
PlayerBoard *-- DefaultProduction
Production <--* Resource
Strongbox <--* Resource
}

package network{

package components{
   class ClientMessageJsonDeserializer
   class Listener
   class ListenerOccupiedException
   class Sender
   class Serializer
   class ServerMessageJsonDeserializer
   Listener <-- Socket
   Sender <-- Socket
   Sender <-- DataOutputStream
}

package messages{
class ClientMessage extends Message {}
class ServerMessage extends Message {}
class EndTurnException extends Throwable{}
enum MessageType{}
ClientMessage <--* Controller
}

class ClientNetInterface
class DisconnectedException
class Message
class NetInterface
class ServerNetInterface extends NetInterface
class ServerNetworkController
ClientNetInterface *-- Sender
ClientNetInterface *-- Listener
ClientNetInterface <-- ServerSocket
Message <-- MessageType
ServerNetInterface *--Sender
ServerNetInterface *-- Listener
ServerNetInterface <--* Serializer
ServerNetInterface <--* Serializer
ServerNetworkController <-- ServerSocket
}

package view{

package gui{

package menus{
class ArrangeMenu
class BuyDevCardMenu
class DefaultProductionMenu
class GameMenu{}
class GUIActionManager
class leaderOptionsMenu
class LeaderChoiceMenu
class MainMenu
class OfflineMenu
class ProduceMenu
class SubMenu extends JFrame
class TakeResourcesMenu
}

package panels{
class DefaultProdPanel
class DepotPanel
class DevBoardPanel
class DevCardsPanel
class LeadersPanel
class MarketPanel
class PlayerBoardPanel
class SoloPanel
class StrongboxPanel
}

class ChoiceBox{}
enum GUIElement
enum ResIcons
}

class CLIActionManager
class Log
class Manager
class ServerView
class ViewHelper
}

class Client{}
class ClientCLI{}
class ClientGUI{}
class Server{}



@enduml